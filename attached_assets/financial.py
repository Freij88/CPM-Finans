"""
Financial analysis module for company financial data comparison.
Handles data fetching, market penetration calculations, and financial visualizations.
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import yfinance as yf
import altair as alt
from datetime import datetime
from utils import get_country_code, calculate_market_penetration, validate_uploaded_file

def initialize_financial_session_state():
    """
    Initialisera session state f√∂r Financial-modulen
    
    How to modify:
    - L√§gg till fler f√∂rvalda f√∂retag i financial_companies
    - √Ñndra standard ticker-symboler f√∂r din bransch
    """
    if 'financial_companies' not in st.session_state:
        st.session_state.financial_companies = ["SAAB-B.ST", "BA.L", "BA"]
    if 'custom_tickers' not in st.session_state:
        st.session_state.custom_tickers = []
    if 'financial_data_cache' not in st.session_state:
        st.session_state.financial_data_cache = pd.DataFrame()

def fetch_financial_data():
    """
    H√§mta finansiell data via yfinance f√∂r f√∂rvalda och anpassade f√∂retag
    
    How to change data source:
    - Ers√§tt yfinance med annan API (t.ex. Alpha Vantage, Quandl)
    - √Ñndra info.get() anrop f√∂r andra datak√§llor
    - L√§gg till API-nyckel hantering h√§r om beh√∂vs
    """
    all_tickers = st.session_state.financial_companies + st.session_state.custom_tickers
    financial_data = []
    errors = []
    
    for ticker in all_tickers:
        try:
            stock = yf.Ticker(ticker)
            info = stock.info
            
            # Kontrollera om data faktiskt h√§mtades
            if not info or len(info) < 5:  # Minimal data check
                errors.append(f"Ingen data hittades f√∂r {ticker}")
                continue
            
            # H√§mta grundl√§ggande data
            company_name = info.get('longName', info.get('shortName', ticker))
            revenue = info.get('totalRevenue', info.get('revenue', 0))
            employees = info.get('fullTimeEmployees', 0)
            pe_ratio = info.get('trailingPE', info.get('forwardPE', 0))
            country = info.get('country', 'Unknown')
            
            # Konvertera revenue till miljarder f√∂r l√§sbarhet
            revenue_billions = revenue / 1e9 if revenue and revenue > 0 else 0
            
            financial_data.append({
                'Ticker': ticker,
                'Company': company_name,
                'Revenue (B USD)': round(revenue_billions, 2) if revenue_billions > 0 else 0,
                'Employees': employees if employees and employees > 0 else 0,
                'P/E Ratio': round(pe_ratio, 2) if pe_ratio and pe_ratio > 0 else 0,
                'Country': country,
                'CountryCode': get_country_code(country),
                'Data Source': 'Yahoo Finance (yfinance)'
            })
            
        except Exception as e:
            errors.append(f"Fel f√∂r {ticker}: {str(e)}")
            continue
    
    # Visa fel om n√•gra uppstod
    if errors:
        st.error("‚ö†Ô∏è F√∂ljande fel uppstod vid datah√§mtning:")
        for error in errors:
            st.write(f"‚Ä¢ {error}")
        st.info("üí° Prova att ladda upp en egen CSV/Excel-fil som alternativ.")
    
    df = pd.DataFrame(financial_data)
    if not df.empty:
        st.session_state.financial_data_cache = df
    
    return df

def create_financial_charts(df):
    """
    Skapa finansiella diagram med Altair
    
    How to modify:
    - √Ñndra diagramtyper fr√•n bar/circle till andra Altair charts
    - L√§gg till fler visualiseringar h√§r
    - √Ñndra f√§rgskala genom color-parametern
    """
    if df.empty:
        return None, None
    
    # Filtrera ut rader med 0-v√§rden f√∂r b√§ttre visualisering
    df_filtered = df[df['Revenue (B USD)'] > 0].copy()
    
    if df_filtered.empty:
        return None, None
    
    # Konvertera till dictionary f√∂r Altair
    chart_data = df_filtered.to_dict('records')
    
    # Revenue chart
    revenue_chart = alt.Chart(alt.InlineData(values=chart_data)).mark_bar().encode(
        x=alt.X('Company:N', sort='-y'),
        y=alt.Y('Revenue (B USD):Q', title='Oms√§ttning (miljarder USD)'),
        color=alt.Color('Country:N', title='Land'),
        tooltip=[
            alt.Tooltip('Company:N', title='F√∂retag'),
            alt.Tooltip('Revenue (B USD):Q', title='Oms√§ttning (B USD)', format='.2f'),
            alt.Tooltip('Employees:Q', title='Anst√§llda', format=','),
            alt.Tooltip('Data Source:N', title='K√§lla')
        ]
    ).properties(
        width=600,
        height=400,
        title='Oms√§ttning per f√∂retag (miljarder USD)'
    )
    
    # P/E Ratio chart - bara f√∂retag med P/E > 0
    pe_data = [item for item in chart_data if item.get('P/E Ratio', 0) > 0]
    
    if pe_data:
        pe_chart = alt.Chart(alt.InlineData(values=pe_data)).mark_circle(size=100).encode(
            x=alt.X('Revenue (B USD):Q', title='Oms√§ttning (miljarder USD)'),
            y=alt.Y('P/E Ratio:Q', title='P/E-tal'),
            color=alt.Color('Country:N', title='Land'),
            size=alt.Size('Employees:Q', title='Antal anst√§llda', scale=alt.Scale(range=[50, 500])),
            tooltip=[
                alt.Tooltip('Company:N', title='F√∂retag'),
                alt.Tooltip('Revenue (B USD):Q', title='Oms√§ttning (B USD)', format='.2f'),
                alt.Tooltip('P/E Ratio:Q', title='P/E-tal', format='.2f'),
                alt.Tooltip('Employees:Q', title='Anst√§llda', format=','),
                alt.Tooltip('Data Source:N', title='K√§lla')
            ]
        ).properties(
            width=600,
            height=400,
            title='P/E-tal vs Oms√§ttning (bubbelstorlek = antal anst√§llda)'
        )
    else:
        pe_chart = None
    
    return revenue_chart, pe_chart

def create_geographic_heatmap(df):
    """
    Skapa geografisk heatmap med Plotly
    
    How to modify:
    - √Ñndra color_continuous_scale f√∂r andra f√§rger
    - L√§gg till fler hover-data genom hover_data parametern
    - √Ñndra geografisk projektion i fig.update_layout
    """
    if df.empty:
        return None
    
    # Gruppera data per land och skapa detaljerad hover-information
    country_groups = df.groupby(['Country', 'CountryCode'])
    
    country_data = []
    for (country, country_code), group in country_groups:
        if country_code == 'N/A':
            continue
            
        companies_list = group['Company'].tolist()
        
        country_data.append({
            'Country': country,
            'CountryCode': country_code,
            'Revenue (B USD)': group['Revenue (B USD)'].sum(),
            'Employees': group['Employees'].sum(),
            'Company Count': len(group),
            'Companies': ', '.join(companies_list)
        })
    
    if not country_data:
        return None
        
    country_df = pd.DataFrame(country_data)
    
    # Skapa heatmap med f√∂rb√§ttrad hover-information
    fig = px.choropleth(
        country_df,
        locations='CountryCode',
        color='Revenue (B USD)',
        hover_name='Country',
        hover_data={
            'Company Count': True,
            'Revenue (B USD)': ':.2f',
            'Employees': ':,',
            'CountryCode': False,
            'Companies': True
        },
        color_continuous_scale='Viridis',
        title='Geografisk f√∂rdelning av oms√§ttning (Source: Yahoo Finance)'
    )
    
    fig.update_layout(
        geo=dict(showframe=False, showcoastlines=True),
        title_x=0.5
    )
    
    return fig

def show_financial_tab():
    """
    Huvudfunktion f√∂r finansiell j√§mf√∂relse-fliken
    
    How to modify:
    - L√§gg till fler parametrar i sidebar
    - √Ñndra layout genom att modifiera kolumnstrukturen
    - L√§gg till automatisk uppdatering genom att ta bort knapp-villkor
    """
    st.header("üí∞ Finansiell J√§mf√∂relse")
    
    # Visa direkt stapeldiagram om det finns cached data
    if not st.session_state.financial_data_cache.empty:
        st.subheader("üìä Senaste finansiella data")
        st.caption("üîó Datak√§lla: Yahoo Finance (yfinance)")
        
        # Skapa och visa diagram direkt
        revenue_chart, pe_chart = create_financial_charts(st.session_state.financial_data_cache)
        
        if revenue_chart:
            col1, col2 = st.columns(2)
            with col1:
                st.caption("üí° Hovra √∂ver staplarna f√∂r detaljer")
                st.altair_chart(revenue_chart, use_container_width=True)
            with col2:
                if pe_chart:
                    st.caption("üí° Bubbelstorlek = antal anst√§llda")
                    st.altair_chart(pe_chart, use_container_width=True)
        
        st.dataframe(st.session_state.financial_data_cache, use_container_width=True)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìà F√∂retagshantering")
        
        # Visa f√∂rvalda f√∂retag med borttagning
        st.write("**F√∂rvalda f√∂retag:**")
        companies_to_remove = []
        for ticker in st.session_state.financial_companies:
            col_ticker, col_remove = st.columns([3, 1])
            with col_ticker:
                st.write(f"‚Ä¢ {ticker}")
            with col_remove:
                if st.button("üóëÔ∏è", key=f"remove_default_{ticker}", help=f"Ta bort {ticker}"):
                    companies_to_remove.append(ticker)
        
        # Ta bort markerade f√∂retag
        for ticker in companies_to_remove:
            st.session_state.financial_companies.remove(ticker)
            st.success(f"Tog bort {ticker}")
            st.rerun()
        
        # L√§gg till anpassade ticker-symboler
        st.write("**L√§gg till fler f√∂retag:**")
        new_ticker = st.text_input("Ticker-symbol (t.ex. AAPL, MSFT):")
        
        if st.button("‚ûï L√§gg till") and new_ticker:
            ticker_upper = new_ticker.upper()
            if ticker_upper not in st.session_state.custom_tickers and ticker_upper not in st.session_state.financial_companies:
                st.session_state.custom_tickers.append(ticker_upper)
                st.success(f"Lade till {ticker_upper}")
                st.rerun()
        
        # Visa tillagda f√∂retag med borttagning
        if st.session_state.custom_tickers:
            st.write("**Tillagda f√∂retag:**")
            custom_to_remove = []
            for ticker in st.session_state.custom_tickers:
                col_ticker, col_remove = st.columns([3, 1])
                with col_ticker:
                    st.write(f"‚Ä¢ {ticker}")
                with col_remove:
                    if st.button("üóëÔ∏è", key=f"remove_custom_{ticker}", help=f"Ta bort {ticker}"):
                        custom_to_remove.append(ticker)
            
            # Ta bort markerade anpassade f√∂retag
            for ticker in custom_to_remove:
                st.session_state.custom_tickers.remove(ticker)
                st.success(f"Tog bort {ticker}")
                st.rerun()
    
    with col2:
        st.subheader("üìÅ Alternativ datak√§lla")
        st.info("Ladda upp CSV/Excel med kolumner: Company, Revenue, Employees, CountryCode")
        
        required_columns = ['Company', 'Revenue', 'Employees', 'CountryCode']
        uploaded_file = st.file_uploader(
            "V√§lj fil", 
            type=['csv', 'xlsx', 'xls'],
            help="Filen ska inneh√•lla kolumnerna: Company, Revenue, Employees, CountryCode"
        )
        
        custom_df = validate_uploaded_file(uploaded_file, required_columns)
        
        if not custom_df.empty:
            st.success("‚úÖ Fil laddad framg√•ngsrikt!")
            st.dataframe(custom_df.head(), use_container_width=True)
    
    # Marknadspenetration f√∂rklaring
    st.info("**üí° Marknadspenetration:** F√∂retagets oms√§ttning √∑ total branschoms√§ttning (500B USD referens)")
    
    # H√§mta finansiell data
    if st.button("üîÑ H√§mta finansiell data fr√•n Yahoo Finance", type="primary"):
        with st.spinner("H√§mtar data fr√•n Yahoo Finance..."):
            financial_df = fetch_financial_data()
            
            if not financial_df.empty:
                # Ber√§kna marknadspenetration
                financial_df = calculate_market_penetration(financial_df)
                
                st.success(f"‚úÖ H√§mtade data f√∂r {len(financial_df)} f√∂retag!")
                
                # Skapa diagram
                st.subheader("üìà Visualiseringar")
                
                # Altair-diagram med tooltips
                revenue_chart, pe_chart = create_financial_charts(financial_df)
                
                if revenue_chart and pe_chart:
                    col1, col2 = st.columns(2)
                    with col1:
                        st.caption("üí° Hovra √∂ver staplarna f√∂r detaljer (k√§lla: Yahoo Finance)")
                        st.altair_chart(revenue_chart, use_container_width=True)
                    with col2:
                        st.caption("üí° Bubbelstorlek = antal anst√§llda (k√§lla: Yahoo Finance)")
                        st.altair_chart(pe_chart, use_container_width=True)
                
                # Geografisk heatmap
                geo_heatmap = create_geographic_heatmap(financial_df)
                if geo_heatmap:
                    st.subheader("üåç Geografisk f√∂rdelning")
                    st.caption("üí° Hovra √∂ver l√§nder f√∂r att se alla f√∂retag")
                    st.plotly_chart(geo_heatmap, use_container_width=True)
                
                # Export-funktion
                st.subheader("üíæ Export")
                csv_financial = financial_df.to_csv(index=False, sep=';')
                st.download_button(
                    label="üìÅ Ladda ner finansiell data som CSV",
                    data=csv_financial,
                    file_name=f"finansiell_jamforelse_{datetime.now().strftime('%Y%m%d')}.csv",
                    mime="text/csv"
                )
            else:
                st.error("‚ùå Kunde inte h√§mta finansiell data. F√∂rs√∂k med fallback-uppladdning.")
    
    # Visa anpassad data om den laddats upp
    if not custom_df.empty:
        st.subheader("üìÅ Uppladdad anpassad data")
        st.caption("üîó Datak√§lla: Anv√§ndarladdad fil")
        st.dataframe(custom_df, use_container_width=True)
        
        # Skapa enkla visualiseringar f√∂r anpassad data
        if 'Revenue' in custom_df.columns and 'Company' in custom_df.columns:
            custom_data = custom_df.to_dict('records')
            custom_chart = alt.Chart(alt.InlineData(values=custom_data)).mark_bar().encode(
                x=alt.X('Company:N', sort='-y'),
                y=alt.Y('Revenue:Q'),
                tooltip=['Company:N', 'Revenue:Q', 'Employees:Q'] if 'Employees' in custom_df.columns else ['Company:N', 'Revenue:Q']
            ).properties(
                width=600,
                height=300,
                title='Anpassad data - Int√§kter per f√∂retag'
            )
            st.altair_chart(custom_chart, use_container_width=True)